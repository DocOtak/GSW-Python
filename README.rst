gsw
===

.. image:: https://travis-ci.org/efiring/python-gswc.svg?branch=master
    :target: https://travis-ci.org/efiring/python-gswc

This Python implementation of the Thermodynamic Equation of
Seawater 2010 (TEOS-10) is based primarily on numpy ufunc wrappers of
the GSW-C implementation.

**Warning: this is in an early development stage.  If it
proceeds, the repo will probably be renamed and moved.**

**Warning: this is for Python >=3.5 only.**

**Warning:** the only official TEOS-10 implementations are
provided as zipfiles at <http://www.teos-10.org/software.htm>.

For the core functionality, we use an auto-generated C extension
module to wrap the C functions as numpy ufuncs, and then use an
autogenerated Python module to add docstrings and handle masked
arrays.  161 scalar C functions with only double-precision
arguments and return values are wrapped as ufuncs, and 155 of
these are exposed in the gsw namespace with an additional
wrapper in Python.

A hand-written wrapper is used for one C function, and 3 others
are re-implemented directly in Python instead of being wrapped.
Additional functions present in GSW-Matlab but not in GSW-C will
be re-implemented in Python, but there is no expectation that
all such functions will be provided.
For the Python implementation we would like to
maintain aspects of the approach used so far: factor out common
chunks of documentation, or and/or pull directly from GSW-Matlab,
with automated customization as needed.  In other words, minimize
repetition at the base level of the source code, so that whenever
something can be improved or needs to be updated, it can be done
in one place, and will then be propagated automatically as needed
by the code generation tools.  As a temporary measure, however,
docstrings for Python functions may be hand-written.

If this development is successful, it will replace
`python-gsw <https://github.com/TEOS-10/python-gsw>`__ as the
primary Python implementation of GSW.

The package can be installed using `pip install .`.  It is not
necessary to run the code generators; their output is
included in the repo.  You will need a suitable compiler: gcc or
clang for unix-like systems, or the MSVC compiler used for Python
itself on Windows.

To test, after installation, run "py.test" from the source directory.
